#!/bin/bash

# ==============================================================================
#  ArttulOS Automated LIVE ISO Builder v21.0 (Robust File Injection)
#
#  - FIX: Replaces the unreliable web server with the robust `--add-file`
#    method for `livemedia-creator`. Branding images are now directly
#    injected into the ISO filesystem, eliminating network dependencies.
#  - This is the standard, correct way to include custom assets.
#
#  Written by: Natalie Spiva, ArttulOS Project
#  Rewritten and Corrected by: AI Assistant
# ==============================================================================

# --- Shell Colors ---
RED='\033[0;31m'; GREEN='\033[0;32m'; YELLOW='\033[1;33m'; BLUE='\033[0;34m'; NC='\033[0m'

# --- Helper Functions ---
error_exit() {
    echo -e "\n${RED}BUILD FAILED: $2${NC}" >&2
    echo -e "${YELLOW}Build directory and logs retained at: $1${NC}"
    exit 1
}

print_step() {
    CURRENT_STEP=$((CURRENT_STEP + 1))
    echo -e "\n${YELLOW}--> Step ${CURRENT_STEP}/${TOTAL_STEPS}: $1${NC}"
}

# --- Configuration ---
DISTRO_NAME="ArttulOS"
DISTRO_VERSION="9.6"
ASSET_REPO_URL="https://github.com/Sprunglesonthehub/arttulos-assets.git"
SOURCE_SIDEBAR_IMAGE="A.png"
SOURCE_TOPBAR_IMAGE="fox.png"
KS_FILENAME="arttulos-live.ks"

# --- Script Internals ---
BUILD_DIR_NAME="build_temp"
ASSET_DIR_NAME="arttulos-assets"
BUILD_MODE="Live"
TOTAL_STEPS=4

# ============================ KICKSTART GENERATION ============================

generate_kickstart() {
    local kickstart_file_path="$1"
    print_step "Generating Kickstart file for '${BUILD_MODE}' mode..."
    
    cat > "${kickstart_file_path}" <<EOF
# Generated by ArttulOS Builder v21.0
#version=RHEL9
text
xconfig --startxonboot
keyboard 'us'
rootpw --iscrypted --lock locked
lang en_US.UTF-8
shutdown
timezone US/Eastern
network --bootproto=dhcp --device=link --activate
firewall --enabled --service=mdns
selinux --enforcing
services --disabled="sshd" --enabled="NetworkManager,ModemManager"

repo --name="BaseOS" --baseurl=https://dl.rockylinux.org/pub/rocky/9/BaseOS/\$basearch/os/
repo --name="AppStream" --baseurl=https://dl.rockylinux.org/pub/rocky/9/AppStream/\$basearch/os/
repo --name="CRB" --baseurl=https://dl.rockylinux.org/pub/rocky/9/CRB/\$basearch/os/
repo --name="extras" --baseurl=https://dl.rockylinux.org/pub/rocky/9/extras/\$basearch/os
repo --name="elrepo-kernel" --baseurl=https://elrepo.org/linux/kernel/el9/\$basearch/

bootloader --location=none
zerombr
clearpart --all --initlabel
part / --fstype="ext4" --size=8192

%packages
@anaconda-tools
@base-x
@core
@fonts
@gnome-desktop
@guest-desktop-agents
@hardware-support
@internet-browser
@multimedia
@networkmanager-submodules
@workstation-product
dracut-live
elrepo-release
kernel-ml
-kernel
aajohan-comfortaa-fonts
anaconda-install-env-deps
anaconda-live
chkconfig
glibc-all-langpacks
initscripts
libreoffice-calc
libreoffice-impress
libreoffice-writer
memtest86+
-@dial-up
-@input-methods
-@standard
-gfs2-utils
-reiserfs-utils
%end

%post --log=/root/ks-post.log --erroronfail
# LIVESYS script from template
cat > /etc/rc.d/init.d/livesys << 'EOT'
#!/bin/bash
# chkconfig: 345 00 99
. /etc/init.d/functions
if ! strstr "\`cat /proc/cmdline\`" rd.live.image || [ "\$1" != "start" ]; then exit 0; fi
if [ -e /.liveimg-configured ] ; then exit 0; fi
useradd -c "Live System User" liveuser
passwd -d liveuser > /dev/null
usermod -aG wheel liveuser > /dev/null
passwd -d root > /dev/null
touch /.liveimg-configured
echo "localhost" > /etc/hostname
EOT
chmod 755 /etc/rc.d/init.d/livesys
/sbin/chkconfig --add livesys
systemctl enable tmp.mount
rm -f /var/lib/rpm/__db*
rm -f /var/lib/systemd/random-seed
rm -f /boot/*-rescue*
rm -f /etc/machine-id && touch /etc/machine-id

# --- ArttulOS Branding and Setup ---
echo "Applying ArttulOS branding..."
sed -i "s/NAME=\"Rocky Linux\"/NAME=\"${DISTRO_NAME}\"/" /etc/os-release
sed -i "s/Rocky Linux release/${DISTRO_NAME} release/" /etc/redhat-release

# Move the pre-injected branding images into place. This is more reliable than curl.
# The files were added to /tmp/ by livemedia-creator's --add-file argument.
mv /tmp/arttulos-sidebar.png /usr/share/anaconda/pixmaps/sidebar-logo.png
mv /tmp/arttulos-topbar.png /usr/share/anaconda/pixmaps/topbar-logo.png

# Setup GDM Auto-login for liveuser
cat > /etc/gdm/custom.conf << EOT
[daemon]
AutomaticLoginEnable=True
AutomaticLogin=liveuser
EOT

# Create installer icon on desktop
if [ -f /usr/share/applications/liveinst.desktop ]; then
  mv /usr/share/applications/liveinst.desktop /usr/share/applications/anaconda.desktop
  sed -i 's/NoDisplay=true/NoDisplay=false/' /usr/share/applications/anaconda.desktop
  sed -i 's/Rocky Linux/Install ${DISTRO_NAME}/' /usr/share/applications/anaconda.desktop
  mkdir -p ~liveuser/Desktop
  cp /usr/share/applications/anaconda.desktop ~liveuser/Desktop/
  chown liveuser:liveuser ~liveuser/Desktop/anaconda.desktop
fi

chown -R liveuser:liveuser /home/liveuser/
restorecon -R /home/liveuser/
echo "ArttulOS post-install script finished."
%end
EOF
    echo -e "${GREEN}    Kickstart file generated successfully.${NC}"
}

# ============================ MAIN BUILD LOGIC ============================

main() {
    if ! command -v livemedia-creator &> /dev/null; then
        echo -e "${RED}Error: 'livemedia-creator' command not found.${NC}" >&2
        echo -e "${YELLOW}Please install it with: sudo dnf install lorax-lmc-novirt${NC}" >&2
        exit 1
    fi
    if [ "$EUID" -ne 0 ]; then
      echo -e "${RED}Error: This script must be run with sudo.${NC}" >&2
      exit 1
    fi

    CURRENT_STEP=0
    local CWD; CWD="$(pwd)"
    local BUILD_DIR="${CWD}/${BUILD_DIR_NAME}"
    local FINAL_ISO_NAME="${DISTRO_NAME}-${DISTRO_VERSION}-${BUILD_MODE}.iso"
    local FINAL_ISO_PATH="${CWD}/${FINAL_ISO_NAME}"

    echo -e "${BLUE}======================================================================${NC}"
    echo -e "${BLUE}  ArttulOS Automated LIVE ISO Builder v21.0                             ${NC}"
    echo -e "${BLUE}======================================================================${NC}"

    echo -e "\n${BLUE}Starting build process...${NC}"
    rm -rf "$BUILD_DIR"; mkdir -p "$BUILD_DIR" || error_exit "$BUILD_DIR" "Could not create build directory."

    local ASSET_DIR="${BUILD_DIR}/${ASSET_DIR_NAME}"
    print_step "Cloning and Processing Assets..."
    git clone --quiet "$ASSET_REPO_URL" "$ASSET_DIR" || error_exit "$BUILD_DIR" "Failed to clone Git repo."
    local SIDEBAR_IMG_PATH="${BUILD_DIR}/arttulos-sidebar.png"
    local TOPBAR_IMG_PATH="${BUILD_DIR}/arttulos-topbar.png"
    convert "${ASSET_DIR}/${SOURCE_SIDEBAR_IMAGE}" -resize 180x230\! "$SIDEBAR_IMG_PATH" || error_exit "$BUILD_DIR" "ImageMagick failed on sidebar image."
    convert "${ASSET_DIR}/${SOURCE_TOPBAR_IMAGE}" -resize 150x25\! "$TOPBAR_IMG_PATH" || error_exit "$BUILD_DIR" "ImageMagick failed on topbar image."
    echo -e "${GREEN}    Assets are ready.${NC}"

    generate_kickstart "${BUILD_DIR}/${KS_FILENAME}"

    print_step "Building the Live ISO with 'livemedia-creator'..."
    echo -e "${YELLOW}This will take a long time and download several GB of packages.${NC}"
    echo -e "${YELLOW}Logs will be available in: ${BUILD_DIR}/logs${NC}"
    
    # Use --add-file to inject branding images directly into the build's /tmp/ directory
    livemedia-creator \
        --make-iso \
        --ks="${BUILD_DIR}/${KS_FILENAME}" \
        --project="${DISTRO_NAME}" \
        --releasever=9 \
        --resultdir="${BUILD_DIR}/result" \
        --logfile="${BUILD_DIR}/logs/livemedia.log" \
        --add-file "${SIDEBAR_IMG_PATH}=/tmp/arttulos-sidebar.png" \
        --add-file "${TOPBAR_IMG_PATH}=/tmp/arttulos-topbar.png" \
        || error_exit "$BUILD_DIR" "livemedia-creator failed. Check logs."

    print_step "Finalizing Build..."
    # Move the final ISO from the result directory to the main project directory
    local RESULT_ISO_PATH; RESULT_ISO_PATH=$(find "${BUILD_DIR}/result" -name "*.iso" -print -quit)
    if [ -f "$RESULT_ISO_PATH" ]; then
        mv "$RESULT_ISO_PATH" "$FINAL_ISO_PATH"
        echo -e "${GREEN}    Moved final ISO to project directory.${NC}"
    else
        error_exit "$BUILD_DIR" "Could not find the final ISO in the result directory."
    fi

    # Cleanup and ownership
    rm -rf "$BUILD_DIR"
    if [ -n "$SUDO_USER" ]; then
        chown "$SUDO_USER:$SUDO_USER" "$FINAL_ISO_PATH"
    fi

    echo -e "\n${GREEN}======================================================================${NC}"
    echo -e "${GREEN}  BUILD COMPLETE!                                                     ${NC}"
    echo -e "${GREEN}  Your '${BUILD_MODE}' ArttulOS ISO is ready:                         ${NC}"
    echo -e "${YELLOW}  ${FINAL_ISO_PATH}${NC}"
    echo -e "${GREEN}======================================================================${NC}"
}

main "$@"
