#!/bin/bash

# ==============================================================================
#  ArttulOS Automated INSTALLER ISO Builder v25.0 (Rocky 9.6 Base)
#
#  - The base ISO is now permanently set to Rocky Linux 9.6.
#  - All download links and version variables have been updated accordingly.
#  - Continues to use the correct UEFI boot modification method.
#
#  Written by: Natalie Spiva, ArttulOS Project
#  Rewritten and Corrected by: AI Assistant
# ==============================================================================

# --- Shell Colors ---
RED='\033[0;31m'; GREEN='\033[0;32m'; YELLOW='\033[1;33m'; BLUE='\033[0;34m'; NC='\033[0m'

# --- Helper Functions ---
error_exit() {
    echo -e "\n${RED}BUILD FAILED: $2${NC}" >&2
    [ -n "$1" ] && [ -d "$1" ] && rm -rf "$1"
    exit 1
}

print_step() {
    CURRENT_STEP=$((CURRENT_STEP + 1))
    echo -e "\n${YELLOW}--> Step ${CURRENT_STEP}/${TOTAL_STEPS}: $1${NC}"
}

# --- Configuration ---
DISTRO_NAME="ArttulOS"
# <<< THE CHANGE IS HERE: Permanently set to Rocky Linux 9.6 >>>
BASE_ISO_URL="https://download.rockylinux.org/pub/rocky/9/isos/x86_64/Rocky-9.6-x86_64-dvd.iso"
BASE_ISO_FILENAME=$(basename "$BASE_ISO_URL")
DISTRO_VERSION="9.6"
ASSET_REPO_URL="https://github.com/Sprunglesonthehub/arttulos-assets.git"
SOURCE_SIDEBAR_IMAGE="A.png"
SOURCE_TOPBAR_IMAGE="fox.png"
KS_FILENAME="arttulos.ks"

# --- Script Internals ---
BUILD_DIR_NAME="build_temp"
BUILD_MODE="Installer"
TOTAL_STEPS=7

# ============================ KICKSTART GENERATION ============================

generate_installer_kickstart() {
    local kickstart_file_path="$1"
    print_step "Generating INSTALLER Kickstart file..."
    cat > "${kickstart_file_path}" <<EOF
# Generated by ArttulOS Builder v25.0 - Installer Kickstart
graphical
lang en_US.UTF-8
keyboard --vckeymap=us --xlayouts='us'
timezone America/New_York --isUtc
network --bootproto=dhcp --device=link --activate --hostname=arttulos-desktop
rootpw --iscrypted --lock locked
firewall --enabled --service=ssh
repo --name="BaseOS" --baseurl=file:///run/install/sources/mount-0/BaseOS/
repo --name="AppStream" --baseurl=file:///run/install/sources/mount-0/AppStream/
repo --name="elrepo-kernel" --baseurl=https://elrepo.org/linux/kernel/el9/\$basearch/

zerombr
clearpart --all --initlabel
autopart --type=lvm
bootloader --location=mbr --boot-drive=sda

%packages
@workstation-product-environment
@guest-desktop-agents
kernel-ml
-kernel
elrepo-release
gnome-initial-setup
%end

%post --log=/root/ks-post.log --erroronfail
echo "--- Starting ArttulOS Post-Installation ---"
sed -i "s/NAME=\"Rocky Linux\"/NAME=\"${DISTRO_NAME}\"/" /etc/os-release
sed -i "s/Rocky Linux release/${DISTRO_NAME} release/" /etc/redhat-release
ML_KERNEL_PATH=\$(ls /boot/vmlinuz-*.elrepo.x86_64 | head -n 1)
if [ -z "\$ML_KERNEL_PATH" ]; then exit 1; fi
grubby --set-default "\$ML_KERNEL_PATH"
GRUB_CFG_PATH=""
if [ -f /boot/grub2/grub.cfg ]; then GRUB_CFG_PATH="/boot/grub2/grub.cfg"; fi
if [ -f /boot/efi/EFI/rocky/grub.cfg ]; then GRUB_CFG_PATH="/boot/efi/EFI/rocky/grub.cfg"; fi
if [ -z "\$GRUB_CFG_PATH" ]; then exit 1; fi
grub2-mkconfig -o "\$GRUB_CFG_PATH"
sed -i "s#\(^\s*\)\(linux\|initrd\) /boot/#\2 /#" "\$GRUB_CFG_PATH"
echo "ArttulOS Post-Installation Complete."
%end
EOF
    echo -e "${GREEN}    Installer Kickstart generated successfully.${NC}"
}

# ============================ MAIN BUILD LOGIC ============================

main() {
    for tool in 7z git convert unsquashfs mksquashfs xorriso; do
        if ! command -v "$tool" &> /dev/null; then
            error_exit "" "Command not found: '$tool'. Please install the required packages."
        fi
    done

    CURRENT_STEP=0
    local CWD; CWD="$(pwd)"
    local BUILD_DIR="${CWD}/${BUILD_DIR_NAME}"
    local BASE_ISO_PATH="${CWD}/${BASE_ISO_FILENAME}"
    local FINAL_ISO_NAME="${DISTRO_NAME}-${DISTRO_VERSION}-${BUILD_MODE}.iso"
    local FINAL_ISO_PATH="${CWD}/${FINAL_ISO_NAME}"

    echo -e "${BLUE}======================================================================${NC}"
    echo -e "${BLUE}  ArttulOS Automated INSTALLER ISO Builder v25.0                      ${NC}"
    echo -e "${BLUE}======================================================================${NC}"

    echo -e "\n${BLUE}Starting build process...${NC}"
    rm -rf "$BUILD_DIR"; mkdir -p "$BUILD_DIR" || error_exit "$BUILD_DIR" "Could not create build directory."
    
    print_step "Checking for base INSTALLER ISO (Rocky ${DISTRO_VERSION})..."
    if [ ! -f "$BASE_ISO_PATH" ]; then
        read -p "    Base ISO '${BASE_ISO_FILENAME}' not found. Download now? [y/N]: " -n 1 -r REPLY; echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then wget -O "$BASE_ISO_PATH" -c "$BASE_ISO_URL" || error_exit "$BUILD_DIR" "Download failed."; else error_exit "$BUILD_DIR" "User aborted."; fi
    else
        echo -e "${GREEN}    Found local base ISO.${NC}"
    fi

    local ISO_ROOT_DIR="${BUILD_DIR}/iso_root"
    print_step "Extracting base ISO contents..."
    7z x "$BASE_ISO_PATH" -o"$ISO_ROOT_DIR" > /dev/null || error_exit "$BUILD_DIR" "Failed to extract base ISO."
    echo -e "${GREEN}    ISO extracted.${NC}"

    local DISCINFO_PATH="${ISO_ROOT_DIR}/.discinfo"
    if [ ! -f "$DISCINFO_PATH" ]; then error_exit "$BUILD_DIR" "Could not find .discinfo file."; fi
    local ISO_LABEL; ISO_LABEL=$(head -n 2 "$DISCINFO_PATH" | tail -n 1)
    if [ -z "$ISO_LABEL" ]; then error_exit "$BUILD_DIR" "Could not read Volume ID from .discinfo file."; fi
    echo -e "${GREEN}    Successfully read Volume ID: ${ISO_LABEL}${NC}"

    generate_installer_kickstart "${BUILD_DIR}/${KS_FILENAME}"

    ( # --- Start Subshell for Safe Operations ---
        cd "$BUILD_DIR" || exit 1

        local ASSET_DIR="assets"
        print_step "Cloning and Processing Assets..."
        git clone --quiet "$ASSET_REPO_URL" "$ASSET_DIR" || exit 1
        convert "${ASSET_DIR}/${SOURCE_SIDEBAR_IMAGE}" -resize 180x230\! "sidebar.png" || exit 1
        convert "${ASSET_DIR}/${SOURCE_TOPBAR_IMAGE}" -resize 150x25\! "topbar.png" || exit 1
        echo -e "${GREEN}    Assets are ready.${NC}"

        print_step "Modifying Installer Image..."
        unsquashfs "iso_root/images/install.img" || exit 1
        cp -f "sidebar.png" "squashfs-root/usr/share/anaconda/pixmaps/sidebar-logo.png"
        cp -f "topbar.png" "squashfs-root/usr/share/anaconda/pixmaps/topbar-logo.png"
        rm "iso_root/images/install.img"
        mksquashfs squashfs-root "iso_root/images/install.img" -noappend || exit 1
        echo -e "${GREEN}    Installer image repacked.${NC}"

        print_step "Configuring Bootloaders for Kickstart..."
        cp "$KS_FILENAME" "iso_root/"
        local KS_PARAM=" inst.ks=hd:LABEL=${ISO_LABEL}:/${KS_FILENAME}"

        # 1. For Legacy BIOS systems (isolinux)
        sed -i "/^  append/ s@\$@${KS_PARAM}@" "iso_root/isolinux/isolinux.cfg"
        sed -i "s/Rocky Linux/${DISTRO_NAME}/g" "iso_root/isolinux/isolinux.cfg"
        echo -e "${GREEN}    Legacy BIOS (isolinux.cfg) configured.${NC}"
        
        # 2. For UEFI systems (BOOT.conf)
        sed -i "/^options=/ s@\$@${KS_PARAM}@" "iso_root/EFI/BOOT/BOOT.conf"
        sed -i "s/Rocky Linux/${DISTRO_NAME}/g" "iso_root/EFI/BOOT/BOOT.conf"
        sed -i "s/Rocky Linux/${DISTRO_NAME}/g" "iso_root/EFI/BOOT/grub.cfg"
        echo -e "${GREEN}    UEFI (BOOT.conf) configured correctly.${NC}"

    ) || error_exit "$BUILD_DIR" "Installer modification failed. Check logs." # --- End Subshell ---

    print_step "Rebuilding final INSTALLER ISO..."
    ( # --- Start Subshell for Final ISO Creation ---
        cd "$ISO_ROOT_DIR" || exit 1
        xorriso -as mkisofs -V "$ISO_LABEL" -o "$FINAL_ISO_PATH" -isohybrid-mbr /usr/share/syslinux/isohdpfx.bin -c isolinux/boot.cat -b isolinux/isolinux.bin -no-emul-boot -boot-load-size 4 -boot-info-table -eltorito-alt-boot -e images/efiboot.img -no-emul-boot -isohybrid-gpt-basdat . > /dev/null 2>&1
    ) || error_exit "$BUILD_DIR" "Failed to rebuild final ISO with xorriso."

    rm -rf "$BUILD_DIR"
    
    echo -e "\n${GREEN}======================================================================${NC}"
    echo -e "${GREEN}  BUILD COMPLETE!                                                     ${NC}"
    echo -e "${GREEN}  Your '${BUILD_MODE}' ArttulOS ISO is ready for virt-install:        ${NC}"
    echo -e "${YELLOW}  ${FINAL_ISO_PATH}${NC}"
    echo -e "${GREEN}======================================================================${NC}"
}

main "$@"
