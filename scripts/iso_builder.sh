#!/bin/bash

# ==============================================================================
#  ArttulOS Automated INSTALLER ISO Builder v38.0 (Build Modes Restored)
#
#  - MY SINCERE APOLOGIES. This version restores the --oem, --appliance, and
#    default build modes which I stupidly removed.
#  - THE FIX:
#    1. The script once again parses command-line arguments for build modes.
#    2. The kickstart generation logic is now conditional, adding the correct
#       sections for each build mode.
#    3. It continues to use the official `mkksiso` tool, which is correct.
#
#  Written by: Natalie Spiva, ArttulOS Project
#  Rewritten and Corrected by: AI Assistant
# ==============================================================================

# --- Shell Colors ---
RED='\033[0;31m'; GREEN='\033[0;32m'; YELLOW='\033[1;33m'; BLUE='\033[0;34m'; NC='\033[0m'

# --- Helper Functions ---
error_exit() {
    echo -e "\n${RED}BUILD FAILED: $1${NC}" >&2
    exit 1
}

print_step() {
    CURRENT_STEP=$((CURRENT_STEP + 1))
    echo -e "\n${YELLOW}--> Step ${CURRENT_STEP}/${TOTAL_STEPS}: $1${NC}"
}

# --- Configuration ---
DISTRO_NAME="ArttulOS"
BASE_ISO_FILENAME="Rocky-9.6-x86_64-dvd.iso"
BASE_ISO_URL="https://download.rockylinux.org/pub/rocky/9.6/isos/x86_64/${BASE_ISO_FILENAME}"
DISTRO_VERSION="9.6"
KS_FILENAME="arttulos.ks"

# --- Script Internals ---
BUILD_MODE="Interactive" # Default build mode
TOTAL_STEPS=3

# ============================ KICKSTART GENERATION ============================

generate_installer_kickstart() {
    local kickstart_file_path="$1"
    print_step "Generating INSTALLER Kickstart for '${BUILD_MODE}' mode..."
    
    cat > "${kickstart_file_path}" <<EOF
# Generated by ArttulOS Builder v38.0 for ${BUILD_MODE} mode
graphical
lang en_US.UTF-8
keyboard --vckeymap=us --xlayouts='us'
timezone America/New_York --isUtc
network --bootproto=dhcp --device=link --activate --hostname=arttulos-desktop
rootpw --iscrypted --lock locked
firewall --enabled --service=ssh
repo --name="BaseOS" --baseurl=file:///run/install/sources/mount-0/BaseOS/
repo --name="AppStream" --baseurl=file:///run/install/sources/mount-0/AppStream/
repo --name="elrepo-kernel" --baseurl=https://elrepo.org/linux/kernel/el9/\$basearch/

zerombr
clearpart --all --initlabel
autopart --type=lvm
bootloader --location=mbr --boot-drive=sda

%packages
@workstation-product-environment
@guest-desktop-agents
kernel-ml
-kernel
elrepo-release
gnome-initial-setup
dracut-config-generic
%end
EOF

    # === THIS IS THE RESTORED LOGIC FOR DIFFERENT BUILD MODES ===
    if [ "$BUILD_MODE" == "Appliance" ] || [ "$BUILD_MODE" == "OEM" ]; then
        echo "eula --agreed" >> "${kickstart_file_path}"
        echo "reboot" >> "${kickstart_file_path}"
    fi

    if [ "$BUILD_MODE" == "Appliance" ]; then
        echo "user --name=arttulos --groups=wheel --password=arttulos --plaintext" >> "${kickstart_file_path}"
    fi

    cat >> "${kickstart_file_path}" <<EOF
%post --log=/root/ks-post.log --erroronfail
echo "--- Starting ArttulOS Post-Installation (${BUILD_MODE} mode) ---"
echo "%wheel ALL=(ALL) ALL" > /etc/sudoers.d/wheel
sed -i 's/^#?PermitRootLogin.*/PermitRootLogin no/' /etc/ssh/sshd_config
ML_KERNEL_VERSION=\$(ls /boot/vmlinuz-*.elrepo.x86_64 | head -n 1 | sed 's/^\/boot\/vmlinuz-//')
if [ -z "\$ML_KERNEL_VERSION" ]; then exit 1; fi
dracut --force --add lvm /boot/initramfs-\${ML_KERNEL_VERSION}.img \${ML_KERNEL_VERSION}
GRUB_CFG_PATH=""
if [ -f /boot/efi/EFI/rocky/grub.cfg ]; then GRUB_CFG_PATH="/boot/efi/EFI/rocky/grub.cfg";
elif [ -f /boot/grub2/grub.cfg ]; then GRUB_CFG_PATH="/boot/grub2/grub.cfg";
else exit 1; fi
grub2-mkconfig -o "\$GRUB_CFG_PATH"
sed -i 's#\(^\s*\)\(linux\|initrd\) /boot/#\2 /#' "\$GRUB_CFG_PATH"
EOF

    if [ "$BUILD_MODE" == "Appliance" ]; then
        cat >> "${kickstart_file_path}" <<EOF
chage -d 0 arttulos
echo "Welcome to ArttulOS Appliance. Default user/pass: arttulos/arttulos. You must change the password on first login." > /etc/motd
EOF
    elif [ "$BUILD_MODE" == "OEM" ]; then
        cat >> "${kickstart_file_path}" <<'EOF'
cat << SERVICE_EOF > /etc/systemd/system/oem-setup.service
[Unit]
Description=ArttulOS First Boot Setup Wizard
After=graphical.target
[Service]
Type=oneshot
ExecStart=/usr/libexec/gnome-initial-setup --existing-user
ExecStartPost=/usr/bin/systemctl disable oem-setup.service
[Install]
WantedBy=graphical.target
SERVICE_EOF
systemctl enable oem-setup.service
EOF
    else # Interactive Mode
        echo "echo 'Welcome to your new ArttulOS system.'" > /etc/motd
    fi

    cat >> "${kickstart_file_path}" <<EOF
echo "ArttulOS Post-Installation Complete."
%end
EOF
    echo -e "${GREEN}    Installer Kickstart generated successfully.${NC}"
}

# ============================ MAIN BUILD LOGIC ============================

main() {
    # --- Step 0: Initial Sanity Checks ---
    if ! command -v mkksiso &> /dev/null; then
        error_exit "Command not found: 'mkksiso'. Please install it with 'sudo dnf install lorax-lmc'."
    fi

    # --- THIS IS THE RESTORED LOGIC FOR ARGUMENT PARSING ---
    if [[ "$1" == "--appliance" ]]; then BUILD_MODE="Appliance"; elif [[ "$1" == "--oem" ]]; then BUILD_MODE="OEM"; fi

    CURRENT_STEP=0
    local CWD; CWD="$(pwd)"
    local BASE_ISO_PATH="${CWD}/${BASE_ISO_FILENAME}"
    # --- FINAL_ISO_NAME now correctly includes the build mode ---
    local FINAL_ISO_NAME="${DISTRO_NAME}-${DISTRO_VERSION}-${BUILD_MODE}.iso"
    local FINAL_ISO_PATH="${CWD}/${FINAL_ISO_NAME}"

    echo -e "${BLUE}======================================================================${NC}"
    echo -e "${BLUE}  ArttulOS Automated INSTALLER ISO Builder v38.0                      ${NC}"
    echo -e "${BLUE}  Building in: ${YELLOW}${BUILD_MODE} Mode${NC}"
    echo -e "${BLUE}======================================================================${NC}"

    echo -e "\n${BLUE}Starting build process...${NC}"
    
    print_step "Checking for base INSTALLER ISO..."
    if [ ! -f "$BASE_ISO_PATH" ]; then
        read -p "    Base ISO '${BASE_ISO_FILENAME}' not found. Download now? [y/N]: " -n 1 -r REPLY; echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then wget -O "$BASE_ISO_PATH" -c "$BASE_ISO_URL" || error_exit "Download failed."; else error_exit "User aborted."; fi
    else
        echo -e "${GREEN}    Found local base ISO.${NC}"
    fi

    generate_installer_kickstart "${CWD}/${KS_FILENAME}"

    print_step "Building custom ISO with 'mkksiso'..."
    echo -e "${YELLOW}This may take a few minutes. The tool will add the kickstart to the boot options.${NC}"

    mkksiso --ks "${CWD}/${KS_FILENAME}" "${BASE_ISO_PATH}" "${FINAL_ISO_PATH}" || error_exit "mkksiso failed. Check logs."

    # Cleanup the kickstart file
    rm -f "${CWD}/${KS_FILENAME}"
    
    echo -e "\n${GREEN}======================================================================${NC}"
    echo -e "${GREEN}  BUILD COMPLETE!                                                     ${NC}"
    echo -e "${GREEN}  Your '${BUILD_MODE}' ArttulOS ISO is ready for virt-install:        ${NC}"
    echo -e "${YELLOW}  ${FINAL_ISO_PATH}${NC}"
    echo -e "${GREEN}======================================================================${NC}"
}

main "$@"
