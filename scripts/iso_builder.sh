#!/bin/bash
# ==============================================================================
# ArttulOS Installer Build Script (v9.2 - Repository & Security Fixes)
#
# Author: RHEL/Rocky Linux Engineering Discipline (Final Correction)
#
# Description:
# This script uses the official 'mkksiso' utility to build the final installer.
#
# v9.2 Corrects Critical Kickstart Failures:
#   - FIX: Replaces faulty 'repo --baseurl' commands for BaseOS/AppStream with
#     the robust 'cdrom' command, resolving the "base repository" error.
#   - FIX: Locks the root account by default for better security hygiene,
#     relying on the created user with sudo privileges.
#   - All previous ArttulOS branding has been re-verified and is complete.
# ==============================================================================

set -e -o pipefail

# --- Configuration Section ---
readonly FINAL_ISO_NAME="ArttulOS-9-Installer-Definitive.iso"
readonly KS_FILENAME="arttulos-installer-final.ks"
readonly PREP_KERNEL_DIR="local-rpms"
readonly WALLPAPER_FILE="strix.png"
readonly STAGING_DIR="/tmp/arttulos_build_staging"
readonly WEB_SERVER_PORT="8000"
WEB_SERVER_PID=""
readonly KS_LANG="en_US.UTF-8"
readonly KS_TIMEZONE="America/Los_Angeles"
readonly KS_USER="arttulos"
readonly KS_PASS="arttulos"
readonly KS_HOSTNAME="arttulos.localdomain"

# --- Helper Functions ---
print_msg() {
    local color=$1; local message=$2; local nocolor='\033[0m'
    case "$color" in
        "green")  echo -e "\n\033[1;32m[SUCCESS]\033[0m ${message}${nocolor}" ;;
        "blue")   echo -e "\n\033[1;34m[INFO]\033[0m ${message}${nocolor}" ;;
        "red")    echo -e "\n\033[1;31m[ERROR]\033[0m ${message}${nocolor}" >&2 ;;
    esac
}

# --- Main Functions ---

check_prerequisites() {
    print_msg "blue" "Verifying prerequisites..."
    if [[ "$EUID" -ne 0 ]]; then print_msg "red" "This script must be run as root. Please use sudo."; exit 1; fi
    if ! command -v mkksiso &> /dev/null; then print_msg "red" "'mkksiso' not found. Please run: sudo dnf install pykickstart"; exit 1; fi
    if ! command -v createrepo_c &> /dev/null; then print_msg "red" "'createrepo_c' not found. Please run: sudo dnf install createrepo_c"; exit 1; fi
    if ! command -v python3 &> /dev/null; then print_msg "red" "'python3' not found."; exit 1; fi
    if [ ! -f "${WALLPAPER_FILE}" ]; then print_msg "red" "Branding file not found: '${PWD}/${WALLPAPER_FILE}'"; exit 1; fi
    if [ ! -d "${PREP_KERNEL_DIR}" ] || [ -z "$(ls -A "${PREP_KERNEL_DIR}"/*.rpm 2>/dev/null)" ]; then print_msg "red" "The '${PREP_KERNEL_DIR}' directory is missing or empty."; exit 1; fi
}

start_web_server() {
    print_msg "blue" "Preparing and starting temporary web server..."
    rm -rf "${STAGING_DIR}"
    mkdir -p "${STAGING_DIR}"
    cp "${PREP_KERNEL_DIR}"/*.rpm "${STAGING_DIR}/"
    cp "${WALLPAPER_FILE}" "${STAGING_DIR}/"
    createrepo_c "${STAGING_DIR}"
    cd "${STAGING_DIR}"
    python3 -m http.server "${WEB_SERVER_PORT}" &
    WEB_SERVER_PID=$!
    cd - > /dev/null
    sleep 2
    print_msg "green" "Temporary web server started with PID ${WEB_SERVER_PID}."
}

stop_web_server() {
    if [ -n "${WEB_SERVER_PID}" ]; then print_msg "blue" "Stopping temporary web server..."; kill "${WEB_SERVER_PID}" &>/dev/null || true; fi
    rm -rf "${STAGING_DIR}"
    rm -f "${KS_FILENAME}"
}

generate_kickstart() {
    local ip_addr; ip_addr=$(hostname -I | awk '{print $1}')
    if [ -z "$ip_addr" ]; then print_msg "red" "Could not determine local IP address."; exit 1; fi
    print_msg "blue" "Generating Kickstart file (Web server: http://${ip_addr}:${WEB_SERVER_PORT})"
    
    cat << EOF > "${KS_FILENAME}"
# Kickstart for ArttulOS 9 Installer - Generated by Build Script v9.2
graphical
eula --agreed
reboot

# --- System Locale and Keyboard ---
lang ${KS_LANG}
keyboard --vckeymap=us --xlayouts='us'
timezone ${KS_TIMEZONE} --isUtc

# --- Installation Source ---
# CRITICAL FIX: Use the booted installation media as the primary source.
# This is robust and resolves the "base repository" error.
cdrom

# Add our temporary local repository for the custom kernel.
repo --name="arttulos-local" --baseurl="http://${ip_addr}:${WEB_SERVER_PORT}/"

# --- Network & Firewall ---
network --bootproto=dhcp --device=link --activate
firewall --enabled --service=ssh

# --- Partitioning ---
zerombr
clearpart --all --initlabel
autopart --type=lvm
bootloader --location=mbr

# --- Authentication ---
# CRITICAL FIX: Lock the root account for better security.
rootpw --iscrypted --lock locked
# Create the administrative user.
user --name=${KS_USER} --groups=wheel --password=${KS_PASS} --plaintext

# --- Security ---
selinux --enforcing

%packages
@core
@fonts
@gnome-desktop
@guest-desktop-agents
@hardware-support
# Install our custom kernel directly from the temporary repo
kernel-ml
kernel-ml-devel
# System Tools
policycoreutils-python-utils
vim-enhanced
kexec-tools
plymouth-scripts
flatpak
curl
# Remove Rocky branding packages
-rocky-logos*
%end

%post --log=/root/ks-post.log --erroronfail
echo "--- ArttulOS Post-Installation & Full Rebranding Script ---"

# 1. System Identity & Permissions
echo "%wheel ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/wheel
cat << 'OS_RELEASE_EOF' > /etc/os-release
NAME="ArttulOS"; VERSION="9"; ID="arttulos"; ID_LIKE="fedora rhel"; VERSION_ID="9"; PLATFORM_ID="platform:el9"
PRETTY_NAME="ArttulOS 9"; ANSI_COLOR="0;35"; CPE_NAME="cpe:/o:arttulos:arttulos:9"
HOME_URL="https://arttulos.com/"; BUG_REPORT_URL="https://bugs.arttulos.com/"
OS_RELEASE_EOF
echo "ArttulOS release 9" > /etc/redhat-release
echo "ArttulOS 9" > /etc/issue
echo "ArttulOS 9 -- Kernel \\r on \\m" > /etc/issue.net

# 2. DNF Repository Branding
for repo_file in /etc/yum.repos.d/rocky*.repo; do
    [ -f "\$repo_file" ] || continue
    new_name=\$(echo "\$repo_file" | sed 's/rocky/arttulos/')
    mv "\$repo_file" "\$new_name"
    sed -i 's/^name=Rocky Linux/name=ArttulOS/g' "\$new_name"
done

# 3. Visual Branding (Wallpaper, Plymouth, GRUB)
SYSTEM_WALLPAPER_DIR="/usr/share/backgrounds/arttulos"
mkdir -p "\${SYSTEM_WALLPAPER_DIR}"
curl -o "\${SYSTEM_WALLPAPER_DIR}/${WALLPAPER_FILE}" "http://${ip_addr}:${WEB_SERVER_PORT}/${WALLPAPER_FILE}"
PLYMOUTH_THEME_DIR="/usr/share/plymouth/themes/arttulos"
mkdir -p "\${PLYMOUTH_THEME_DIR}"; cp "\${SYSTEM_WALLPAPER_DIR}/${WALLPAPER_FILE}" "\${PLYMOUTH_THEME_DIR}/"
cat << 'PLYMOUTH_EOF' > "\${PLYMOUTH_THEME_DIR}/arttulos.plymouth"
[Plymouth Theme]; Name=ArttulOS; Description=ArttulOS Boot Splash; ModuleName=script
[script]; ImageDir=\${PLYMOUTH_THEME_DIR}; ScriptFile=\${PLYMOUTH_THEME_DIR}/arttulos.script
PLYMOUTH_EOF
cat << 'SCRIPT_EOF' > "\${PLYMOUTH_THEME_DIR}/arttulos.script"
wallpaper_image = Image("${WALLPAPER_FILE}"); screen_width = Window.GetWidth(); screen_height = Window.GetHeight();
resized_wallpaper_image = wallpaper_image.Scale(screen_width, screen_height);
wallpaper_sprite = Sprite(resized_wallpaper_image); wallpaper_sprite.SetZ(-100);
SCRIPT_EOF
plymouth-set-default-theme arttulos -R
GRUB_THEME_DIR="/boot/grub2/themes/arttulos"; mkdir -p "\${GRUB_THEME_DIR}"; cp "\${SYSTEM_WALLPAPER_DIR}/${WALLPAPER_FILE}" "\${GRUB_THEME_DIR}/background.png"
cat << 'THEME_EOF' > "\${GRUB_THEME_DIR}/theme.txt"
desktop-image: "background.png"; desktop-color: "#000000"; title-text: ""
+ boot_menu { left = 15%; width = 70%; top = 35%; height = 40%; item_font = "DejaVu Sans 16"; item_color = "#87cefa"; item_spacing = 25; selected_item_font = "DejaVu Sans Bold 16"; selected_item_color = "#d8b6ff"; }
+ hbox { left = 15%; top = 80%; width = 70%; + label { text = "ArttulOS 9 - Mainline Kernel"; font = "DejaVu Sans 12"; color = "#cccccc"; } }
THEME_EOF
echo 'GRUB_THEME="/boot/grub2/themes/arttulos/theme.txt"' >> /etc/default/grub; echo 'GRUB_TERMINAL_OUTPUT="gfxterm"' >> /etc/default/grub;
grub2-set-default 0; grub2-mkconfig -o /boot/grub2/grub.cfg

# 4. GNOME Desktop & GDM Login Screen Configuration
GSETTINGS_OVERRIDES_DIR="/etc/dconf/db/local.d"; GDM_OVERRIDES_DIR="/etc/dconf/db/gdm.d"
WALLPAPER_PATH="file://\${SYSTEM_WALLPAPER_DIR}/${WALLPAPER_FILE}"; mkdir -p "\${GSETTINGS_OVERRIDES_DIR}" "\${GDM_OVERRIDES_DIR}"
cat << 'GSETTINGS_EOF' > "\${GSETTINGS_OVERRIDES_DIR}/01-arttulos-branding"
[org/gnome/desktop/interface]; color-scheme='prefer-dark'
[org/gnome/desktop/background]; picture-uri='${WALLPAPER_PATH}'; picture-uri-dark='${WALLPAPER_PATH}'
[org/gnome/desktop/screensaver]; picture-uri='${WALLPAPER_PATH}'
[org.gnome.shell]; favorite-apps=['org.mozilla.firefox.desktop', 'org.gnome.Nautilus.desktop', 'org.gnome.Console.desktop', 'org.gnome.Software.desktop']
GSETTINGS_EOF
cat << 'GDM_EOF' > "\${GDM_OVERRIDES_DIR}/01-arttulos-branding"
[org/gnome/desktop/background]; picture-uri='${WALLPAPER_PATH}'; picture-uri-dark='${WALLPAPER_PATH}'
GDM_EOF
dconf update

# 5. First-Boot Online Installer Service
cat << 'SERVICE_SCRIPT_EOF' > /usr/local/sbin/arttulos-first-boot.sh
#!/bin/bash
exec 1>>/var/log/arttulos-first-boot.log 2>&1
echo "--- Starting first-boot online application installation ---"
flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo
flatpak install -y flathub org.mozilla.firefox org.gajim.Gajim org.gnome.Polari
sh <(curl --proto '=https' --tlsv1.2 -L https://nixos.org/nix/install) --no-daemon --yes
if [ -f /root/.nix-profile/etc/profile.d/nix.sh ]; then . /root/.nix-profile/etc/profile.d/nix.sh; nix-env -iA nixpkgs.element-desktop; fi
echo "--- First-boot setup complete ---"
SERVICE_SCRIPT_EOF
chmod +x /usr/local/sbin/arttulos-first-boot.sh
cat << 'SERVICE_EOF' > /etc/systemd/system/arttulos-first-boot.service
[Unit]; Description=ArttulOS First-Boot Online Installer; After=network-online.target; Wants=network-online.target
[Service]; Type=oneshot; ExecStart=/usr/local/sbin/arttulos-first-boot.sh; ExecStartPost=/bin/rm -f /usr/local/sbin/arttulos-first-boot.sh; ExecStartPost=/bin/systemctl disable arttulos-first-boot.service
[Install]; WantedBy=multi-user.target
SERVICE_EOF
systemctl enable arttulos-first-boot.service
echo "--- Post-installation script finished successfully. ---"
%end
EOF
    print_msg "green" "Kickstart file generated successfully."
}

build_installer_iso() {
    local base_iso_path
    read -p "Please enter the full path to the BASE Rocky Linux 9 INSTALLER ISO: " base_iso_path
    if [ ! -f "$base_iso_path" ]; then print_msg "red" "Source ISO file not found at '${base_iso_path}'."; exit 1; fi
    print_msg "blue" "Starting ISO build with mkksiso. This will be quick."
    mkksiso --ks "${KS_FILENAME}" "${base_iso_path}" "${FINAL_ISO_NAME}"
    print_msg "green" "Build complete!"
    echo -e "Your new installer ISO is located at: \033[1m${PWD}/${FINAL_ISO_NAME}\033[0m"
}

# --- Main Execution ---
main() {
    trap stop_web_server EXIT SIGHUP SIGINT SIGTERM
    check_prerequisites
    start_web_server
    generate_kickstart
    build_installer_iso
}

main "$@"
