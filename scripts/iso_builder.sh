#!/bin/bash

# ==============================================================================
# ArttulOS ISO Build Script (Manual Start Version)
#
# Version: 1.1
# Description: This script creates a custom, offline Rocky Linux 9 installer
#              for ArttulOS. It embeds the ELRepo mainline kernel and a Kickstart
#              file. The boot menu is modified to add an *optional* entry for
#              the automated installation, leaving the default manual install intact.
#
# Usage:
#   1. Download a Rocky Linux 9 DVD ISO.
#   2. Save this script as 'build-arttulos-iso.sh'.
#   3. Make it executable: chmod +x build-arttulos-iso.sh
#   4. Run with sudo: sudo ./build-arttulos-iso.sh
# ==============================================================================

set -e # Exit immediately if a command exits with a non-zero status.

# --- Configuration ---
BUILD_DIR="arttulos-build"
ISO_EXTRACT_DIR="${BUILD_DIR}/iso_extracted"
CUSTOM_REPO_DIR="${ISO_EXTRACT_DIR}/custom_repo"
DOWNLOAD_DIR="${BUILD_DIR}/rpm_downloads"
FINAL_ISO_NAME="ArttulOS-9-Offline.iso"
ISO_LABEL="ARTTULOS9"

# --- Functions ---

# Function to print colored messages
print_msg() {
    local color=$1
    local message=$2
    case "$color" in
        "green") echo -e "\n\e[32m[SUCCESS]\e[0m ${message}" ;;
        "blue") echo -e "\n\e[34m[INFO]\e[0m ${message}" ;;
        "yellow") echo -e "\n\e[33m[WARN]\e[0m ${message}" ;;
        "red") echo -e "\n\e[31m[ERROR]\e[0m ${message}" >&2 ;;
    esac
}

# Function to check for required commands
check_dependencies() {
    print_msg "blue" "Checking for required tools..."
    local missing_tools=0
    for cmd in dnf createrepo_c genisoimage isohybrid; do
        if ! command -v "$cmd" &> /dev/null; then
            print_msg "yellow" "Command '${cmd}' not found. Attempting to install required packages..."
            dnf install -y dnf-utils createrepo_c genisoimage syslinux
            break # Install all at once and then re-check
        fi
    done
    print_msg "green" "All dependencies are satisfied."
}

# Function to clean up previous builds
cleanup() {
    print_msg "blue" "Cleaning up previous build directories..."
    umount "${BUILD_DIR}/iso_mount" &>/dev/null || true # Ignore errors if not mounted
    rm -rf "${BUILD_DIR}"
}

# --- Main Script ---

# 1. Initial Checks and Setup
if [ "$EUID" -ne 0 ]; then
  print_msg "red" "This script must be run as root. Please use sudo."
  exit 1
fi

check_dependencies
cleanup

print_msg "blue" "Creating build workspace..."
mkdir -p "${BUILD_DIR}/iso_mount" "${ISO_EXTRACT_DIR}" "${CUSTOM_REPO_DIR}" "${DOWNLOAD_DIR}"

# 2. Get and Extract the Base ISO
read -p "Please enter the full path to the Rocky Linux 9 DVD ISO file: " BASE_ISO_PATH
if [ ! -f "$BASE_ISO_PATH" ]; then
    print_msg "red" "ISO file not found at '${BASE_ISO_PATH}'."
    exit 1
fi

print_msg "blue" "Mounting and extracting the base ISO. This may take a few minutes..."
mount -o loop,ro "$BASE_ISO_PATH" "${BUILD_DIR}/iso_mount"
rsync -a -H --exclude=TRANS.TBL "${BUILD_DIR}/iso_mount/" "${ISO_EXTRACT_DIR}"
umount "${BUILD_DIR}/iso_mount"
chmod -R u+w "${ISO_EXTRACT_DIR}" # Make files writable

# 3. Download Kernel Packages
print_msg "blue" "Installing ELRepo release and downloading mainline kernel packages..."
dnf install -y https://www.elrepo.org/elrepo-release-9.el9.elrepo.noarch.rpm
dnf download --resolve --arch=x86_64 \
--downloaddir="${DOWNLOAD_DIR}" \
kernel-ml kernel-ml-devel

# 4. Create the Custom Offline Repository
print_msg "blue" "Creating custom repository within the ISO structure..."
mv "${DOWNLOAD_DIR}"/*.rpm "${CUSTOM_REPO_DIR}/"
createrepo_c "${CUSTOM_REPO_DIR}"

# 5. Create and Inject the Kickstart File
print_msg "blue" "Generating and injecting the Kickstart file (ks.cfg)..."
cat << EOF > "${ISO_EXTRACT_DIR}/ks.cfg"
# Kickstart file for ArttulOS (Generated by build script)
# Version: 1.9 - For use with a custom OFFLINE ISO containing kernel-ml.
graphical
repo --name="custom-kernel" --baseurl=file:///run/install/repo/custom_repo
lang en_US.UTF-8
keyboard --vckeymap=us --xlayouts='us'
timezone America/Los_Angeles --isUtc
network --hostname=arttulos.localdomain
rootpw --plaintext arttulos
firewall --enabled --service=ssh
selinux --enforcing
zerombr
clearpart --all --initlabel
autopart --type=lvm
bootloader --location=mbr
reboot
%packages --instLangs=en_US --excludedocs
@core
@server
kernel-ml
kernel-ml-devel
openssh-server
policycoreutils-python-utils
vim-enhanced
wget
curl
git
kexec-tools
firefox
gajim
polari
element-desktop
%end
%post --log=/root/ks-post.log
echo "Starting ArttulOS post-installation script..."
grub2-set-default 0
cat << MOTD > /etc/motd

            (Genesis for the Ascii)

        Welcome to ArttulOS
      This system is running a mainline kernel from ELRepo.

MOTD
echo "ArttulOS" > /etc/issue
echo "ArttulOS" > /etc/issue.net
useradd ArttulOS -c "ArttulOS Admin"
usermod -aG wheel ArttulOS
echo "ArttulOS:arttulos" | chpasswd
echo "%wheel ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/wheel
sed -i 's/.*PermitRootLogin.*/PermitRootLogin no/' /etc/ssh/sshd_config
sed -i 's/.*PasswordAuthentication.*/PasswordAuthentication yes/' /etc/ssh/sshd_config
sed -i 's/^#PasswordAuthentication/PasswordAuthentication/' /etc/ssh/sshd_config
echo "Post-installation script finished."
%end
EOF

# 6. Modify Bootloader Configs to ADD Kickstart Option
print_msg "blue" "Adding Kickstart option to bootloader configurations..."

# For Legacy BIOS (isolinux.cfg)
ISOLINUX_CFG="${ISO_EXTRACT_DIR}/isolinux/isolinux.cfg"
cat << EOF >> "${ISOLINUX_CFG}"

label ks
  menu label ^Install ArttulOS (Automated Kickstart)
  kernel vmlinuz
  append initrd=initrd.img inst.stage2=hd:LABEL=${ISO_LABEL} quiet inst.ks=hd:LABEL=${ISO_LABEL}:/ks.cfg
EOF

# For UEFI (grub.cfg)
GRUB_CFG="${ISO_EXTRACT_DIR}/EFI/BOOT/grub.cfg"
cat << EOF >> "${GRUB_CFG}"

menuentry 'Install ArttulOS (Automated Kickstart)' --class red --class gnu-linux --class gnu --class os {
	linuxefi /images/pxeboot/vmlinuz inst.stage2=hd:LABEL=${ISO_LABEL} quiet inst.ks=hd:LABEL=${ISO_LABEL}:/ks.cfg
	initrdefi /images/pxeboot/initrd.img
}
EOF

# 7. Rebuild the Bootable ISO
print_msg "blue" "Building the final ISO: ${FINAL_ISO_NAME}. This will take some time..."
cd "${ISO_EXTRACT_DIR}"
genisoimage -o "/${FINAL_ISO_NAME}" \
  -b isolinux/isolinux.bin -c isolinux/boot.cat \
  -no-emul-boot -boot-load-size 4 -boot-info-table \
  -eltorito-alt-boot -e images/efiboot.img -no-emul-boot \
  -R -J -v -T -V "${ISO_LABEL}" .

# Make the ISO bootable on UEFI systems
isohybrid --uefi "/${FINAL_ISO_NAME}"
cd ..

print_msg "green" "Build complete!"
echo -e "Your new ISO is located at: \e[1m/${PWD}/${FINAL_ISO_NAME}\e[0m"
print_msg "yellow" "SECURITY WARNING: This ISO uses default plaintext passwords ('arttulos')."
print_msg "yellow" "If using the Kickstart option, change passwords immediately after installation."
echo -e "\nTo use, burn the ISO to a USB drive or mount it in a VM and boot from it."
echo "From the boot menu, you can choose the standard manual installation or the new automated option."